---
title: "Day3_lab8_futureverse"
format: html
editor: visual
---

```{r}
library(futureverse)

```

**Task 1:**

Copy and paste the following two code blocks.

Create functions `tic()` and `toc()` to measure time:

```{r}
tic <- function() {
  tic_start <<- base::Sys.time()
}

toc <- function() {
  dt <- base::difftime(base::Sys.time(), tic_start)
  dt <- round(dt, digits = 1L)
  message(paste(format(dt), "since tic()"))
}
```

These functions can be used as a timer, e.g.

```{r}
tic()
Sys.sleep(1.5)
toc()

```

```{r}
Sys.sleep(4.0)
toc()
```

Next, create toy function `slow_sum()` for calculating the sum of a vector really slowly:

```{r}
slow_sum <- function(x) {
  sum <- 0
  for (value in x) {
    Sys.sleep(1.0)     ## one-second slowdown per value
    sum <- sum + value
  }
  sum
}
```

This function works just like `sum()`, but it is very slow. If we use it to calculate 1+2+…+10, it will takes us ten seconds to get the result;

```{r}
tic()
y <- slow_sum(1:10)
y
toc()

```

*Make sure you can run the latter, that it takes ten seconds to complete and that it returns the correct value.*

We are now ready to get rolling!

### **Simple parallel tasks**

At the very core of Futureverse is the [**future**](https://future.futureverse.org/) package. Let us start out by loading this core package:

```{r}
library(future)
```

It provides us with the fundamental building blocks for running R code in parallel; functions `future()`, `value()`, and `resolved()`. Other Futureverse packages, such as **future.apply**, **furrr**, and **doFuture**, rely on these three functions to build up more feature-rich functions. We will return to those later, but for now we will focus on `future()` and `value()`.

**Task 2:**

Let’s start by writing our initial example using futures:

```{r}
tic()
f <- future(slow_sum(1:10))
y <- value(f)
toc()
y
```

*Confirm that you get the correct result. Did it run faster?*

*NO... (That's because the default for plan is plan(sequential) instead of multisession, sequencial is slow)*

**Task 3:**

Add another `toc()` just after the `future()` call;

```{r}
tic()
f <- future(slow_sum(1:10))
toc()
y <- value(f)
toc()
y
toc()
```

*How long did the creation of the future take?*

**Task 4:**

By design, Futureverse runs everything sequentially by default. We can configure it run code in parallel using two background workers as:

```{r}
plan(multisession, workers = 2)
```

*Make this change, and rerun the above example. Did the different steps take as long as you expected? What do you think the reason is for the change?*

```{r}
tic()
f <- future(slow_sum(1:10))
toc()
y <- value(f)
toc()
y
toc()
```

**Task 5:**

Let’s calculate 1+2+…+10 in two steps: (a) 1+2+…+5 and (b) 6+7+…+10, and then sum the two results.

```{r}
fa <- future(slow_sum(1:5))
fb <- future(slow_sum(6:10))
y <- value(fa) + value(fb)
y
```

But first, make sure to add `toc()` after each statement to better understand how long each step takes;

```{r}
tic()
fa <- future(slow_sum(1:5))
toc()
fb <- future(slow_sum(6:10))
toc()
y <- value(fa) + value(fb)
toc()
y
toc()
```

*Make sure you get the expected result. Did it finish sooner? Which step takes the longest? Why do you think that is?*

### **Create many parallel tasks via a for loop**

**Task 6:**

Here is a very complicated way of calculating the sum 1+2+…+20 in four chunks and outputting messages to show the progress:

```{r}
tic()
xs <- list(1:5, 6:10, 11:15, 16:20)
ys <- list()
for (ii in seq_along(xs)) {
  message(paste0("Iteration ", ii))
  ys[[ii]] <- slow_sum(xs[[ii]])
}
message("Done")
print(ys)

ys <- unlist(ys)
ys

y <- sum(ys)
y
toc()
```

Rewrite it such that each iteration is parallelized via a future. Use four parallel workers as in:

```{r}
tic()
xs <- list(1:5, 6:10, 11:15, 16:20)
ys <- list()
for (ii in seq_along(xs)) {
  message(paste0("Iteration ", ii))
  ys[[ii]] <- slow_sum(xs[[ii]])
}
message("Created all futures")
ys <- value(ys)
message("Done")
print(ys)

toc()
```

```{r}
plan(multisession, workers = 4)
tic()
fa <- future(slow_sum(1:5))
toc()
fb <- future(slow_sum(6:10))
toc()
fc <- future(slow_sum(11:15))
toc()
fd <- future(slow_sum(16:20))
toc()
y <- value(fa) + value(fb) + value(fc) + value(fd)
toc()
y
toc()
```

**Task 7:**

Retry with three parallel workers as in:

```{r}
library(future)
plan(multisession, workers = 3)
plan(multisession, workers = 4)
tic()
fa <- future(slow_sum(1:5))
toc()
fb <- future(slow_sum(6:10))
toc()
fc <- future(slow_sum(11:15))
toc()

y <- value(fa) + value(fb) + value(fc) 
toc()
y
toc()
```

### **Our own parallel lapply**

**Task 8:**

Above, you used a for-loop to parallelize tasks. See if you can achieve the same using `lapply()` instead.

**Task 9:**

Take your parallel `lapply()` code and wrap it up in a function `parallel_lapply()` that takes two arguments `X` and `FUN` so that we can call:

```{r}
parallel_lapply <- function(X, FUN) {
  ## Create futures that calls FUN(X[[1]]), FUN(X[[2]]), ...
  fs <- lapply(X, function(x) {
    ## For element 'x', create future that calls FUN(x)
    future(FUN(x))
  })
  
  ## Collect the values from all futures
  value(fs)
}


library(future)
plan(multisession)
tic()
xs <- list(1:5, 6:10, 11:15, 16:20)

ys <- parallel_lapply(xs, slow_sum)
ys <- unlist(ys)
y <- sum(ys)

y
toc()
```

### **Errors and parallel processing**

The Futureverse has been designed such that your experience running parallel code will be as close as possible to when you run regular, sequential code. For example, if we call:

```{r}
x <- "1.2"
y <- log(x)
```

**Task 10:**

If we try the same with a future, it’s natural to expect the same error;

```{r}
f <- future(log(x))
f
```

*Run the above. Did you get an error or not? What could be the reason for that?*

*If we try to get the value of `f` as in*

```{r}
y <- value(f)
y
```

Note

At first, it might appear obvious that we should get an error in these cases and that it will look the same as when running regular sequential code. But rest assured, Futureverse is the only parallel framework that behave this way. If you use one of the traditional frameworks you will get a different type of error, or not an error at all. This is the case for `parLapply()` and `mclapply()` of **parallel** as well as for `foreach()` and `%dopar%` of **foreach**.

**Task 11:**

Try with the following sequential code:

```{r}
X <- list("1.2", 42)
y <- lapply(X, log)
```

**Task 12:**

Next, try the same but with `mclapply()` of the **parallel** package;

```{r}
library(parallel)

X <- list("1.2", 42)
y <- mclapply(X, log)
```

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
