---
title: "Lab7_Tidyverse"
format: html
editor: visual
---

## **1 General exercises**

#### **1.1.1 Chunk 1**

Rewrite the following code chunks as pipes (Load package `magrittr` because `tidyverse` supports only the `%>%` pipe!):

```{r}
## original
my_cars <- mtcars[, c(1:4, 10)]
my_cars <- my_cars[my_cars$disp > mean(my_cars$disp), ]
my_cars <- colMeans(my_cars)
```

```{r}
## rewrite
library(magrittr)
my_cars <- mtcars
my_cars %>%
  select(c(1:4, 10)) %>%
   filter(disp > mean(disp)) %>%
   colMeans() 

```

#### **1.1.2 Chunk 2**

The `summary(x)` function is a bit special: when you type `summary(x)` in the console, `print` is called in an implicit way. Pipe call does not do such implicite call, so you will have to invoke `print` in an explicit way. But the `%T>%` does unbranch for one call only, you will have to make printing of the `summary` a one single composed call using `{}`. Try to wrap your mind around this. If in doubt, turn to a TA.

```{r}
cars %T>% 
  {print(summary(.))} %>% 
  colSums()
```

#### **1.1.3 Chunk 3**

Rewrite the following correlations using pipes.

```{r}
cor(mtcars$gear, mtcars$mpg)
```

```{r}
mtcars %$% cor(gear, mpg)
```

#### **1.1.4 Chunk 4**

Given is the `dim_summary(nrows, ncols)` function which takes `nrows` and `ncols` as arguments and prints this info:

```{r}
dim_summary <- function(nrows, ncols) {
  print(
    paste0('Matrix M has: ', nrows, ' rows and ', ncols, ' columns.')
  )
}
```

Rewrite each of the code chunks below using pipes:

```{r}
### 1 
distr1 <- rnorm(16)
M <- matrix(distr1, ncol = 4)
plot(M)
M <- M + sample(M)
dim_summary(nrows = nrow(M), ncols = ncol(M))
```

```{r}
### rewrite 1
M <- rnorm(16) %>% 
     matrix(ncol = 4) %T>% 
     plot() %>% 
     `+` (., sample(.)) %>% 
     {dim_summary(nrows = nrow(.), ncols = ncol(.))}
```

```{r}
## 2
distr2 <- rnorm(16)
N <- matrix(distr2, ncol = 4)
colnames(N) <- (letters[1:4])
summary(N)
N <- N + 0
```

```{r}
## rewrite 2
N <- rnorm(16) %>% 
     matrix(ncol = 4) %>% 
     `colnames<-`  (letters[1:4]) %T>%
     {print(summary(.))} %>% 
     `+` (., 0)
```

```{r}
## 3
## Error!!
P <- M %x% t(N)
heatmap(P)
colnames(P) <- letters[1:dim(P)[2]]
cor(P[ ,'a'], P[ ,'i'])
```

```{r}
## rewrite 3
## Error!!
P <- M %>% 
  `%x%` (., t(N)) %T>% 
    heatmap() %>% 
    `colnames<-` (letters[1:dim(.)[2]]) %>%
  as_data_frame() %$%
  cor(a, i)
```

### **1.2 Tibbles**

#### **1.2.1 Task 1**

-   Convert the `mtcars` dataset to a tibble `vehicles`.

-   Select the number of cylinders (`cyl`) variable using:

    -   the `[[index]]` accessor,

    -   the `[[string]]` accessor,

    -   the `$` accessor.

-   Do the same selection as above, but using pipe and placeholders (use all three ways of accessing a variable).

-   Print the tibble.

-   Print the 30 first rows of the tibble.

-   Change the default behavior of printing a tibble so that at least 15 and at most 30 rows are printed.

-   What is the difference between the `tibble.print_max` and `dplyr.print_min`? Is there any? Test it.

-   Convert `vehicles` back to a `data.frame` called `automobiles`.

```{r}
#1
vehicles <- tibble(mtcars)
#2
vehicles[[2]]
vehicles[["cyl"]]
vehicles$cyl
#3
vehicles %$% cyl
vehicles %>% select(cyl) 

vehicles %T>%
  {print(.[['cyl']])} %T>%
  {print(.[[2]])} %>%
  .$cyl
#4
vehicles
#5
vehicles %>% head(n = 30)
# 6 ^ ^
options(tibble.print_min = 15, tibble.print_max = 30)

# 7
# In theory there should be no difference. dplyr imports tibble from the tibble package
# and dplyr.width, dplyr.print_min and dplyr.print_min are passed down to the tibble.
# But test both behaviours. First with only the tibble package loaded, later with dplyr # loaded.

# 8
automobiles <- as.data.frame(vehicles)




```

#### **1.2.2 Task 2**

Create the following tibble using `tribble()`:

```{r}
tab <- tribble(
  ~id, ~event, ~date,
  1, 'success', '24-04-2017',
  2, 'failed', '25-04-2017',
  3, 'failed', '25-04-2017',
  4, 'success', '27-04-2017'
)

```

#### **1.2.3 Task 3**

Compare the performance of `as.data.frame()`, `as_data_frame()` and `as_tibble()` on a 100 x 30 matrix filled with some random integers. Use package `microbenchmark`. Fill in your result [here](https://docs.google.com/spreadsheets/d/1_2tDeEkDVS06RkB437yBI1XEB5SUebtHWyxAf_aRJu4/edit#gid=99106509) in the Tidyverse Lab sheet, Tibbles – performance.

```{r}
tst <- replicate(30, sample(100), simplify = TRUE)
colnames(tst) = paste0(rep('col', times = dim(tst)[2]), 1:dim(tst)[2])
microbenchmark::microbenchmark(
  as.data.frame(tst),
  as_data_frame(tst),
  as_tibble(tst)
)
```

### **1.3 Parsing**

Parse the following vectors using `parse_` functions:

-   `vec1 <- c(1, 7.2, 3.84, -5.23)` – parse it as `double` (any problems? why?).

-   Now, parse the same vector `c(1, 7.2, 3.84, -5.23)` as `integer`. What happens?

-   Can you still parse it as `integer` somehow?

-   Parse as double `vec2 <- c('2', '3,45', '?', '-7,28')`

-   Parse correctly `vec3 <- c('2', '3,45', '?', '-7.28')`

-   Parse the following guessing the parser: `vec4 <- c('barrel: 432.7$', 'liter: 15.42PLN', 'gallon costs approx 32.1SEK', 'sunny, wind gusts up till 55m/s')`

-   Can you parse `vec4` as number? Do it if you can.

-   Parse `vec5 <- "25 Dec 2015"` as date (hint: `?parse_date()`).

-   Parse `10_Jul_1410` as date.

```{r}
# 1 vec1 <- c(1, 7.2, 3.84, -5.23) – parse it as double (any problems? why?). 
# Have to convert the number to the character first before using parse_integer

library(readr)

vec1 <- c(1, 7.2, 3.84, -5.23)
if (!is.character(vec1)) {
  vec1 <- as.character(vec1)
}
parse_double(vec1)

parse_integer(vec1)
#parse_integer(as.integer(vec1)) # Is it the best way? Hint: rounding.

# 2 Parse as double vec2 <- c('2', '3,45', '?', '-7,28')

vec2 <- c('2', '3,45', '?', '-7,28')

if (!is.character(vec2)) {
  vec2 <- as.character(vec2)
}

parse_double(vec2, na = '?', locale = locale(decimal_mark = ','))

parse_number(vec2, na = '?', locale = locale(decimal_mark = ','))

vec3 <- c('2', '3,45', '?', '-7.28')
vec4 <- c('barrel: 432.7$', 'liter: 15.42PLN', 'gallon costs approx 32.1SEK', 'sunny, wind gusts up till 55m/s')

guess_parser(vec4)

parse_guess(vec4)

parse_number(vec4)

vec5 <- "25 Dec 2015"

parse_date(vec5, format="%d %b %Y")

vec6 <- "10_Jul_1410"
parse_date(vec6, format="%d%.%b%.%Y")


```

## **2 NYC flights Challenge**

The `nycflights13` package contains information about all flights that departed from NYC (i.e., EWR, JFK and LGA) in 2013: 336,776 flights with 16 variables. To help understand what causes delays, it also includes a number of other useful datasets: weather, planes, airports, airlines. We will use it to train working with tibbles and `dplyr`.

### **2.1 Task 1: Selecting column**

-   Load the `nycflights13` package (install if necessary).

-   Read about the data in the package docs.

-   Inspect the `flights` tibble.

-   Select all columns but `carrier` and `arr_time`.

-   Select `carrier`, `tailnum` and `origin`.

-   Hide columns from `day` through `carrier`.

-   Select all columns that have to do with `arr`ival (hint: `?tidyselect`).

-   Select columns based on a vector `v <- c("arr_time", "sched_arr_time", "arr_delay")`.

-   Rename column `dest` to `destination` using:

    -   `select()` and

    -   `rename()`

What is the difference between the two approaches?

```{r}
library(nycflights13)

flights %>% select(-carrier, -arr_time)

flights %>% select(carrier, tailnum, origin)

flights %>% select(-(day:carrier))

flights %>% select(contains('arr_')) 

flights %>% select(destination = dest)
flights %>% rename(destination = dest)


```

### **2.2 Task 2: Filtering rows**

-   Filter only the flights that arrived ahead of schedule.

```{r}
flights %>% filter(arr_delay < 0)
```

-   Filter the flights that had departure delay between 10 and 33.

```{r}
flights %>% filter(dep_delay >= 10, dep_delay <= 33)
# or
flights %>% filter(between(dep_delay, 10, 33))
```

-   Fish out all flights with unknown arrival time.

```{r}
flights %>% filter(is.na(arr_time))
```

-   Retrieve rows 1234:1258 (hint: `?slice`).

```{r}

flights %>% slice(1234:1258)
```

-   Sample (`?sample_n()`) 3 random flights per day in March.

```{r}
flights %>% filter(month == 3) %>%
  group_by(day) %>%
  slice_sample(n = 3)
```

-   Show 5 most departure-delayed flights in January per carrier.

```{r}
flights %>%
  filter(month == 1) %>%
  group_by(carrier) %>%
  slice_max(dep_delay, n = 5)
```

-   Retrieve all `unique()` routes and sort them by destination.

```{r}
flights %>%
  select(origin, dest) %>%
  unique() %>%
  arrange(dest)

flights %>%
  mutate(route = paste(origin, dest, sep="-")) %>%
  select(route) %>%
  unique()
```

-   Retrieve all `distinct()` routes and sort them by destination.

```{r}
nycflights13::flights %>%
  select(origin, dest) %>%
  distinct() %>%
  arrange(dest)

# or
flights %>%
  mutate(route = paste(origin, dest, sep="-"))  %>%
  distinct(route)
```

### **2.3 Task 3: Trans(mutations)**

-   `air_time` is the amount of time in minutes spent in the air. Add a new column `air_spd` that will contain aircraft’s airspeed in mph.

-   As above, but keep only the new `air_spd` variable.

-   Use `rownames_to_column()` on `mtcars` to add car model as an extra column.

```{r}
flights %>% mutate(air_spd = distance/(air_time / 60))
flights %>% transmute(air_spd = distance/(air_time / 60)) #keep only the new air_spd variable.
library(tibble)
mtcars %>% rownames_to_column('model')

```

### **2.4 Task 4: Groups and counts**

-   Use `group_by()`, `summarise()` and `n()` to see how many planes were delayed (departure) every month.

```{r}
flights %>% 
  filter(dep_delay >0) %>%
  group_by(month) %>% 
  summarise(num_dep_delayed = n())

```

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
